[LocalizedFileNames]
2.2 complacent comma placement.py=@2.2 complacent comma placement,0
7.6 dictionary pretty-printing.py=@7.6 dictionary pretty-printing,0
7.3 Emulating switchcase.py=@7.3 Emulating switchcase,0
7.2 sorting dictionaries for fun and profit.py=@7.2 sorting dictionaries for fun and profit,0
7.1 Dictionary Default Values.py=@7.1 Dictionary Default Values,0
6.7 Iterator Chains.py=@6.7 Iterator Chains,0
6.6 generator expressions.py=@6.6 generator expressions,0
6.5 generators are simplified iterators.py=@6.5 generators are simplified iterators,0
6.4 beautiful iterators.py=@6.4 beautiful iterators,0
6.3 list slicing tricks and the sushi operator.py=@6.3 list slicing tricks and the sushi operator,0
4.2a string conversion or every class needs a dunder repr.py=@4.2a string conversion or every class needs a dunder repr,0
4.1 object comparisons is vs ==.py=@4.1 object comparisons is vs ==,0
6.2 comprehending comprehensions.py=@6.2 comprehending comprehensions,0
6.1 writing pythonic loops.py=@6.1 writing pythonic loops,0
5.4 sets and multisets.py=@5.4 sets and multisets,0
5.3 records structs and data transfer objects.py=@5.3 records structs and data transfer objects,0
5.2 array data structure.py=@5.2 array data structure,0
5.1 dictionaries maps and hashtables.py=@5.1 dictionaries maps and hashtables,0
4.8 instance class and static methods.py=@4.8 instance class and static methods,0
4.7 class vs instance variable pitfalls.py=@4.7 class vs instance variable pitfalls,0
4.6 what namedtuples are good for.py=@4.6 what namedtuples are good for,0
4.5 abstract base classes keep inheritance in check.py=@4.5 abstract base classes keep inheritance in check,0
4.3 Defining your own exception classes.py=@4.3 Defining your own exception classes,0
4.4 cloning objects for fun and profit.py=@4.4 cloning objects for fun and profit,0
4.2b str vs repr.py=@4.2b str vs repr,0
3.6 nothing to return here.py=@3.6 nothing to return here,0
3.5 function argument unpacking.py=@3.5 function argument unpacking,0
3.1a function.py=@3.1a function,0
3.3c how to write debuggable decorators.py=@3.3c how to write debuggable decorators,0
3.3b decorating functions that accepts arguments.py=@3.3b decorating functions that accepts arguments,0
3.3a the power of decorators.py=@3.3a the power of decorators,0
3.4 fun with args and kwargs.py=@3.4 fun with args and kwargs,0
3.2 lambdas are single-expression functions.py=@3.2 lambdas are single-expression functions,0
3.1b functions can be nested.py=@3.1b functions can be nested,0
2.1 assert.py=@2.1 assert,0
2.3 context managers.py=@2.3 context managers,0
2.4 underscores, dunders, and more.py=@2.4 underscores, dunders, and more,0
2.5 a shocking truth about string formatting.py=@2.5 a shocking truth about string formatting,0
